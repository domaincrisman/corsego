- content_for :title do
  GoTuts
  |
  = @course.title

= link_to 'Courses', courses_path
|
= link_to course_path(@course) do
  .fa.fa-graduation-cap
  = @course.title
  
.row
  .col-lg-8.order-1.order-lg-1
    .jumbotron.shadow
      %h3
        .fa.fa-graduation-cap
        = @course.title
      %hr
      .fa.fa-book
      = pluralize(@course.chapters_count, 'Chapter')
      .row
      .fa.fa-tasks
      = pluralize(@course.lessons_count, 'Lesson')
      .row
      .fa.fa-clock
      Created
      = @course.created_at.strftime("%m/%Y")
      .row
      .fa.fa-clock
      Last updated
      = @course.updated_at.strftime("%m/%Y")
      .row
      .fa.fa-globe-americas
      = @course.language
      .row
      .fa.fa-signal
      = @course.level
      .row
      .fa.fa-file-pdf
      Certificate of Completion
      .row
      .fa.fa-comment
      Access to Member-Only Q&A
      .row
      .fa.fa-download
      Access to Member-Only Resources
      .row
      .fa.fa-infinity
      Full Lifetime Access & Updates
      %hr
      = @course.description
    %h4
      .fa.fa-book
      = pluralize(@course.chapters_count, 'chapter')

    .list-group
      - @chapters.each do |chapter|
        .list-group-item.shadow
          = render 'chapters/chapter_preview', chapter: chapter
          - chapter.lessons.rank(:row_order).each do |lesson|
            .list-group-item.list-group-item-secondary
              = render 'lessons/lesson_preview', lesson: lesson
        %p
    %hr

    %h4
      .fa.fa-comment
      = pluralize(@enrollments_with_review.count, 'review')
    
    - @enrollments_with_review.each do |enrollment|
      = render 'enrollments/enrollment', enrollment: enrollment
    %p

  .col-lg-4.order-0.order-lg-1
    .sticky-top
      = render 'courses/course', course: @course
    %p

%h4 
  .fa.fa-graduation-cap
  Related courses

.row
  - Course.approved.published.where.not(id: @course.id).each do |course|
    - unless @course.tags.pluck(:id).intersection(course.tags.pluck(:id)).count.zero?
      .col-md-6
        - @course.tags.pluck(:id).intersection(course.tags.pluck(:id)).each do |x|
          .badge.badge-info
            = Tag.find_by(id: x)
        = render 'courses/course', course: course
        %p